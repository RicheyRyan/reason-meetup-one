// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Quiz$ReactTemplate = require("./Quiz.bs.js");
var Error$ReactTemplate = require("./Error.bs.js");
var Result$ReactTemplate = require("./Result.bs.js");
var Routes$ReactTemplate = require("../Shared/Routes.bs.js");
var Decoder$ReactTemplate = require("../Shared/Decoder.bs.js");
var Encoder$ReactTemplate = require("../Shared/Encoder.bs.js");
var Loading$ReactTemplate = require("./Loading.bs.js");
var Greeting$ReactTemplate = require("./Greeting.bs.js");

var component = ReasonReact.reducerComponent("App");

function requestQuestions(cb) {
  fetch(Routes$ReactTemplate.resolveRoute(/* Quiz */1)).then((function (prim) {
              return prim.json();
            })).then((function (json) {
            var quiz = Decoder$ReactTemplate.quiz(json);
            return Promise.resolve(Curry._1(cb, /* QuizLoaded */Block.__(2, [quiz])));
          })).catch((function (err) {
          return Promise.resolve(Curry._1(cb, /* Failed */Block.__(1, [err])));
        }));
  return /* () */0;
}

function submitAnswers(answers, cb) {
  fetch(Routes$ReactTemplate.resolveRoute(/* Quiz */1), Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[{
                      "Content-Type": "application/json"
                    }], /* Some */[JSON.stringify(Encoder$ReactTemplate.answerList(answers))], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)).then((function (prim) {
              return prim.json();
            })).then((function (json) {
            var result = Decoder$ReactTemplate.result(json);
            return Promise.resolve(Curry._1(cb, /* ResultLoaded */Block.__(3, [result])));
          })).catch((function (err) {
          return Promise.resolve(Curry._1(cb, /* Failed */Block.__(1, [err])));
        }));
  return /* () */0;
}

function showQuiz(quiz, onSelectAnswers) {
  return ReasonReact.element(/* None */0, /* None */0, Quiz$ReactTemplate.make(quiz, onSelectAnswers, /* array */[]));
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* currentState */0];
              if (typeof match === "number") {
                if (match === 0) {
                  return ReasonReact.element(/* None */0, /* None */0, Greeting$ReactTemplate.make((function () {
                                    return Curry._1(self[/* send */3], /* QuizLoading */1);
                                  }), /* array */[]));
                } else {
                  return ReasonReact.element(/* None */0, /* None */0, Loading$ReactTemplate.make("We're just loading the quiz...", /* array */[]));
                }
              } else {
                switch (match.tag | 0) {
                  case 0 : 
                      return ReasonReact.element(/* None */0, /* None */0, Loading$ReactTemplate.make("We're just loading your results...", /* array */[]));
                  case 1 : 
                      return ReasonReact.element(/* None */0, /* None */0, Error$ReactTemplate.make(/* array */[]));
                  case 2 : 
                      return showQuiz(match[0], (function (answers) {
                                    return Curry._1(self[/* send */3], /* ResultLoading */Block.__(0, [answers]));
                                  }));
                  case 3 : 
                      return ReasonReact.element(/* None */0, /* None */0, Result$ReactTemplate.make(match[0], /* array */[]));
                  
                }
              }
            }),
          /* initialState */(function () {
              return /* record */[
                      /* currentState : Initial */0,
                      /* answers : [] */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* currentState : Initial */0,
                              /* answers : [] */0
                            ]]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* currentState : QuizLoading */1,
                              /* answers */state[/* answers */1]
                            ],
                            (function (self) {
                                return requestQuestions(self[/* send */3]);
                              })
                          ]);
                }
              } else if (action.tag) {
                return /* Update */Block.__(0, [/* record */[
                            /* currentState */action,
                            /* answers */state[/* answers */1]
                          ]]);
              } else {
                var answers = action[0];
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* record */[
                            /* currentState : ResultLoading */Block.__(0, [answers]),
                            /* answers */state[/* answers */1]
                          ],
                          (function (self) {
                              return submitAnswers(answers, self[/* send */3]);
                            })
                        ]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.requestQuestions = requestQuestions;
exports.submitAnswers = submitAnswers;
exports.showQuiz = showQuiz;
exports.make = make;
/* component Not a pure module */
